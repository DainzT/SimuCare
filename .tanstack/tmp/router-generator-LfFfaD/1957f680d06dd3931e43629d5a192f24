/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authorizedRouteRouteImport } from './routes/(authorized)/route'
import { Route as rootmainRouteRouteImport } from './routes/(root)/(main)/route'
import { Route as authorizedSimulationRouteRouteImport } from './routes/(authorized)/simulation/route'
import { Route as authorizedDashboardRouteRouteImport } from './routes/(authorized)/dashboard/route'
import { Route as rootmainIndexRouteImport } from './routes/(root)/(main)/index'
import { Route as authorizedDashboardIndexRouteImport } from './routes/(authorized)/dashboard/index'
import { Route as rootAuthSignupRouteImport } from './routes/(root)/auth/signup'
import { Route as rootAuthLoginRouteImport } from './routes/(root)/auth/login'
import { Route as rootmainFeaturesRouteImport } from './routes/(root)/(main)/features'
import { Route as rootmainAboutRouteImport } from './routes/(root)/(main)/about'
import { Route as authorizedSimulationScenarioIdRouteImport } from './routes/(authorized)/simulation/$scenarioId'
import { Route as authorizedDashboardUploadRouteImport } from './routes/(authorized)/dashboard/upload'
import { Route as authorizedDashboardSettingsRouteImport } from './routes/(authorized)/dashboard/settings'
import { Route as authorizedDashboardScenariosRouteImport } from './routes/(authorized)/dashboard/scenarios'
import { Route as authorizedDashboardProgressRouteImport } from './routes/(authorized)/dashboard/progress'

const authorizedRouteRoute = authorizedRouteRouteImport.update({
  id: '/(authorized)',
  getParentRoute: () => rootRouteImport,
} as any)
const rootmainRouteRoute = rootmainRouteRouteImport.update({
  id: '/(root)/(main)',
  getParentRoute: () => rootRouteImport,
} as any)
const authorizedSimulationRouteRoute =
  authorizedSimulationRouteRouteImport.update({
    id: '/simulation',
    path: '/simulation',
    getParentRoute: () => authorizedRouteRoute,
  } as any)
const authorizedDashboardRouteRoute =
  authorizedDashboardRouteRouteImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => authorizedRouteRoute,
  } as any)
const rootmainIndexRoute = rootmainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootmainRouteRoute,
} as any)
const authorizedDashboardIndexRoute =
  authorizedDashboardIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => authorizedDashboardRouteRoute,
  } as any)
const rootAuthSignupRoute = rootAuthSignupRouteImport.update({
  id: '/(root)/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const rootAuthLoginRoute = rootAuthLoginRouteImport.update({
  id: '/(root)/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const rootmainFeaturesRoute = rootmainFeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootmainRouteRoute,
} as any)
const rootmainAboutRoute = rootmainAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootmainRouteRoute,
} as any)
const authorizedSimulationScenarioIdRoute =
  authorizedSimulationScenarioIdRouteImport.update({
    id: '/$scenarioId',
    path: '/$scenarioId',
    getParentRoute: () => authorizedSimulationRouteRoute,
  } as any)
const authorizedDashboardUploadRoute =
  authorizedDashboardUploadRouteImport.update({
    id: '/upload',
    path: '/upload',
    getParentRoute: () => authorizedDashboardRouteRoute,
  } as any)
const authorizedDashboardSettingsRoute =
  authorizedDashboardSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => authorizedDashboardRouteRoute,
  } as any)
const authorizedDashboardScenariosRoute =
  authorizedDashboardScenariosRouteImport.update({
    id: '/scenarios',
    path: '/scenarios',
    getParentRoute: () => authorizedDashboardRouteRoute,
  } as any)
const authorizedDashboardProgressRoute =
  authorizedDashboardProgressRouteImport.update({
    id: '/progress',
    path: '/progress',
    getParentRoute: () => authorizedDashboardRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof rootmainIndexRoute
  '/dashboard': typeof authorizedDashboardRouteRouteWithChildren
  '/simulation': typeof authorizedSimulationRouteRouteWithChildren
  '/dashboard/progress': typeof authorizedDashboardProgressRoute
  '/dashboard/scenarios': typeof authorizedDashboardScenariosRoute
  '/dashboard/settings': typeof authorizedDashboardSettingsRoute
  '/dashboard/upload': typeof authorizedDashboardUploadRoute
  '/simulation/$scenarioId': typeof authorizedSimulationScenarioIdRoute
  '/about': typeof rootmainAboutRoute
  '/features': typeof rootmainFeaturesRoute
  '/auth/login': typeof rootAuthLoginRoute
  '/auth/signup': typeof rootAuthSignupRoute
  '/dashboard/': typeof authorizedDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof rootmainIndexRoute
  '/simulation': typeof authorizedSimulationRouteRouteWithChildren
  '/dashboard/progress': typeof authorizedDashboardProgressRoute
  '/dashboard/scenarios': typeof authorizedDashboardScenariosRoute
  '/dashboard/settings': typeof authorizedDashboardSettingsRoute
  '/dashboard/upload': typeof authorizedDashboardUploadRoute
  '/simulation/$scenarioId': typeof authorizedSimulationScenarioIdRoute
  '/about': typeof rootmainAboutRoute
  '/features': typeof rootmainFeaturesRoute
  '/auth/login': typeof rootAuthLoginRoute
  '/auth/signup': typeof rootAuthSignupRoute
  '/dashboard': typeof authorizedDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(authorized)': typeof authorizedRouteRouteWithChildren
  '/(authorized)/dashboard': typeof authorizedDashboardRouteRouteWithChildren
  '/(authorized)/simulation': typeof authorizedSimulationRouteRouteWithChildren
  '/(root)/(main)': typeof rootmainRouteRouteWithChildren
  '/(authorized)/dashboard/progress': typeof authorizedDashboardProgressRoute
  '/(authorized)/dashboard/scenarios': typeof authorizedDashboardScenariosRoute
  '/(authorized)/dashboard/settings': typeof authorizedDashboardSettingsRoute
  '/(authorized)/dashboard/upload': typeof authorizedDashboardUploadRoute
  '/(authorized)/simulation/$scenarioId': typeof authorizedSimulationScenarioIdRoute
  '/(root)/(main)/about': typeof rootmainAboutRoute
  '/(root)/(main)/features': typeof rootmainFeaturesRoute
  '/(root)/auth/login': typeof rootAuthLoginRoute
  '/(root)/auth/signup': typeof rootAuthSignupRoute
  '/(authorized)/dashboard/': typeof authorizedDashboardIndexRoute
  '/(root)/(main)/': typeof rootmainIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/simulation'
    | '/dashboard/progress'
    | '/dashboard/scenarios'
    | '/dashboard/settings'
    | '/dashboard/upload'
    | '/simulation/$scenarioId'
    | '/about'
    | '/features'
    | '/auth/login'
    | '/auth/signup'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/simulation'
    | '/dashboard/progress'
    | '/dashboard/scenarios'
    | '/dashboard/settings'
    | '/dashboard/upload'
    | '/simulation/$scenarioId'
    | '/about'
    | '/features'
    | '/auth/login'
    | '/auth/signup'
    | '/dashboard'
  id:
    | '__root__'
    | '/(authorized)'
    | '/(authorized)/dashboard'
    | '/(authorized)/simulation'
    | '/(root)/(main)'
    | '/(authorized)/dashboard/progress'
    | '/(authorized)/dashboard/scenarios'
    | '/(authorized)/dashboard/settings'
    | '/(authorized)/dashboard/upload'
    | '/(authorized)/simulation/$scenarioId'
    | '/(root)/(main)/about'
    | '/(root)/(main)/features'
    | '/(root)/auth/login'
    | '/(root)/auth/signup'
    | '/(authorized)/dashboard/'
    | '/(root)/(main)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authorizedRouteRoute: typeof authorizedRouteRouteWithChildren
  rootmainRouteRoute: typeof rootmainRouteRouteWithChildren
  rootAuthLoginRoute: typeof rootAuthLoginRoute
  rootAuthSignupRoute: typeof rootAuthSignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authorized)': {
      id: '/(authorized)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authorizedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(root)/(main)': {
      id: '/(root)/(main)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootmainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authorized)/simulation': {
      id: '/(authorized)/simulation'
      path: '/simulation'
      fullPath: '/simulation'
      preLoaderRoute: typeof authorizedSimulationRouteRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/dashboard': {
      id: '/(authorized)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof authorizedDashboardRouteRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(root)/(main)/': {
      id: '/(root)/(main)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootmainIndexRouteImport
      parentRoute: typeof rootmainRouteRoute
    }
    '/(authorized)/dashboard/': {
      id: '/(authorized)/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof authorizedDashboardIndexRouteImport
      parentRoute: typeof authorizedDashboardRouteRoute
    }
    '/(root)/auth/signup': {
      id: '/(root)/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof rootAuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(root)/auth/login': {
      id: '/(root)/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof rootAuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(root)/(main)/features': {
      id: '/(root)/(main)/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof rootmainFeaturesRouteImport
      parentRoute: typeof rootmainRouteRoute
    }
    '/(root)/(main)/about': {
      id: '/(root)/(main)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof rootmainAboutRouteImport
      parentRoute: typeof rootmainRouteRoute
    }
    '/(authorized)/simulation/$scenarioId': {
      id: '/(authorized)/simulation/$scenarioId'
      path: '/$scenarioId'
      fullPath: '/simulation/$scenarioId'
      preLoaderRoute: typeof authorizedSimulationScenarioIdRouteImport
      parentRoute: typeof authorizedSimulationRouteRoute
    }
    '/(authorized)/dashboard/upload': {
      id: '/(authorized)/dashboard/upload'
      path: '/upload'
      fullPath: '/dashboard/upload'
      preLoaderRoute: typeof authorizedDashboardUploadRouteImport
      parentRoute: typeof authorizedDashboardRouteRoute
    }
    '/(authorized)/dashboard/settings': {
      id: '/(authorized)/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof authorizedDashboardSettingsRouteImport
      parentRoute: typeof authorizedDashboardRouteRoute
    }
    '/(authorized)/dashboard/scenarios': {
      id: '/(authorized)/dashboard/scenarios'
      path: '/scenarios'
      fullPath: '/dashboard/scenarios'
      preLoaderRoute: typeof authorizedDashboardScenariosRouteImport
      parentRoute: typeof authorizedDashboardRouteRoute
    }
    '/(authorized)/dashboard/progress': {
      id: '/(authorized)/dashboard/progress'
      path: '/progress'
      fullPath: '/dashboard/progress'
      preLoaderRoute: typeof authorizedDashboardProgressRouteImport
      parentRoute: typeof authorizedDashboardRouteRoute
    }
  }
}

interface authorizedDashboardRouteRouteChildren {
  authorizedDashboardProgressRoute: typeof authorizedDashboardProgressRoute
  authorizedDashboardScenariosRoute: typeof authorizedDashboardScenariosRoute
  authorizedDashboardSettingsRoute: typeof authorizedDashboardSettingsRoute
  authorizedDashboardUploadRoute: typeof authorizedDashboardUploadRoute
  authorizedDashboardIndexRoute: typeof authorizedDashboardIndexRoute
}

const authorizedDashboardRouteRouteChildren: authorizedDashboardRouteRouteChildren =
  {
    authorizedDashboardProgressRoute: authorizedDashboardProgressRoute,
    authorizedDashboardScenariosRoute: authorizedDashboardScenariosRoute,
    authorizedDashboardSettingsRoute: authorizedDashboardSettingsRoute,
    authorizedDashboardUploadRoute: authorizedDashboardUploadRoute,
    authorizedDashboardIndexRoute: authorizedDashboardIndexRoute,
  }

const authorizedDashboardRouteRouteWithChildren =
  authorizedDashboardRouteRoute._addFileChildren(
    authorizedDashboardRouteRouteChildren,
  )

interface authorizedSimulationRouteRouteChildren {
  authorizedSimulationScenarioIdRoute: typeof authorizedSimulationScenarioIdRoute
}

const authorizedSimulationRouteRouteChildren: authorizedSimulationRouteRouteChildren =
  {
    authorizedSimulationScenarioIdRoute: authorizedSimulationScenarioIdRoute,
  }

const authorizedSimulationRouteRouteWithChildren =
  authorizedSimulationRouteRoute._addFileChildren(
    authorizedSimulationRouteRouteChildren,
  )

interface authorizedRouteRouteChildren {
  authorizedDashboardRouteRoute: typeof authorizedDashboardRouteRouteWithChildren
  authorizedSimulationRouteRoute: typeof authorizedSimulationRouteRouteWithChildren
}

const authorizedRouteRouteChildren: authorizedRouteRouteChildren = {
  authorizedDashboardRouteRoute: authorizedDashboardRouteRouteWithChildren,
  authorizedSimulationRouteRoute: authorizedSimulationRouteRouteWithChildren,
}

const authorizedRouteRouteWithChildren = authorizedRouteRoute._addFileChildren(
  authorizedRouteRouteChildren,
)

interface rootmainRouteRouteChildren {
  rootmainAboutRoute: typeof rootmainAboutRoute
  rootmainFeaturesRoute: typeof rootmainFeaturesRoute
  rootmainIndexRoute: typeof rootmainIndexRoute
}

const rootmainRouteRouteChildren: rootmainRouteRouteChildren = {
  rootmainAboutRoute: rootmainAboutRoute,
  rootmainFeaturesRoute: rootmainFeaturesRoute,
  rootmainIndexRoute: rootmainIndexRoute,
}

const rootmainRouteRouteWithChildren = rootmainRouteRoute._addFileChildren(
  rootmainRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authorizedRouteRoute: authorizedRouteRouteWithChildren,
  rootmainRouteRoute: rootmainRouteRouteWithChildren,
  rootAuthLoginRoute: rootAuthLoginRoute,
  rootAuthSignupRoute: rootAuthSignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
