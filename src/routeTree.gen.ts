/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UploadRouteImport } from './routes/upload'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ScenariosRouteImport } from './routes/scenarios'
import { Route as ProgressRouteImport } from './routes/progress'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SimulationScenarioIdRouteImport } from './routes/simulation.$scenarioId'

const UploadRoute = UploadRouteImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ScenariosRoute = ScenariosRouteImport.update({
  id: '/scenarios',
  path: '/scenarios',
  getParentRoute: () => rootRouteImport,
} as any)
const ProgressRoute = ProgressRouteImport.update({
  id: '/progress',
  path: '/progress',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SimulationScenarioIdRoute = SimulationScenarioIdRouteImport.update({
  id: '/simulation/$scenarioId',
  path: '/simulation/$scenarioId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/progress': typeof ProgressRoute
  '/scenarios': typeof ScenariosRoute
  '/settings': typeof SettingsRoute
  '/upload': typeof UploadRoute
  '/simulation/$scenarioId': typeof SimulationScenarioIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/progress': typeof ProgressRoute
  '/scenarios': typeof ScenariosRoute
  '/settings': typeof SettingsRoute
  '/upload': typeof UploadRoute
  '/simulation/$scenarioId': typeof SimulationScenarioIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/progress': typeof ProgressRoute
  '/scenarios': typeof ScenariosRoute
  '/settings': typeof SettingsRoute
  '/upload': typeof UploadRoute
  '/simulation/$scenarioId': typeof SimulationScenarioIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/progress'
    | '/scenarios'
    | '/settings'
    | '/upload'
    | '/simulation/$scenarioId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/progress'
    | '/scenarios'
    | '/settings'
    | '/upload'
    | '/simulation/$scenarioId'
  id:
    | '__root__'
    | '/'
    | '/progress'
    | '/scenarios'
    | '/settings'
    | '/upload'
    | '/simulation/$scenarioId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProgressRoute: typeof ProgressRoute
  ScenariosRoute: typeof ScenariosRoute
  SettingsRoute: typeof SettingsRoute
  UploadRoute: typeof UploadRoute
  SimulationScenarioIdRoute: typeof SimulationScenarioIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/upload': {
      id: '/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/scenarios': {
      id: '/scenarios'
      path: '/scenarios'
      fullPath: '/scenarios'
      preLoaderRoute: typeof ScenariosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/progress': {
      id: '/progress'
      path: '/progress'
      fullPath: '/progress'
      preLoaderRoute: typeof ProgressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/simulation/$scenarioId': {
      id: '/simulation/$scenarioId'
      path: '/simulation/$scenarioId'
      fullPath: '/simulation/$scenarioId'
      preLoaderRoute: typeof SimulationScenarioIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProgressRoute: ProgressRoute,
  ScenariosRoute: ScenariosRoute,
  SettingsRoute: SettingsRoute,
  UploadRoute: UploadRoute,
  SimulationScenarioIdRoute: SimulationScenarioIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
