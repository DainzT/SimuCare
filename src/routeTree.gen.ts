/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnknownRouteImport } from './routes/_unknown'
import { Route as rootRouteRouteImport } from './routes/(root)/route'
import { Route as authorizedRouteRouteImport } from './routes/(authorized)/route'
import { Route as rootIndexRouteImport } from './routes/(root)/index'
import { Route as rootFeaturesRouteImport } from './routes/(root)/features'
import { Route as rootAboutRouteImport } from './routes/(root)/about'
import { Route as authorizedUploadRouteImport } from './routes/(authorized)/upload'
import { Route as authorizedSettingsRouteImport } from './routes/(authorized)/settings'
import { Route as authorizedScenariosRouteImport } from './routes/(authorized)/scenarios'
import { Route as authorizedProgressRouteImport } from './routes/(authorized)/progress'
import { Route as authorizedDashboardRouteImport } from './routes/(authorized)/dashboard'
import { Route as authorizedSimulationRouteRouteImport } from './routes/(authorized)/simulation/route'
import { Route as rootAuthSignupRouteImport } from './routes/(root)/auth/signup'
import { Route as rootAuthLoginRouteImport } from './routes/(root)/auth/login'
import { Route as authorizedSimulationScenarioIdRouteImport } from './routes/(authorized)/simulation/$scenarioId'

const UnknownRoute = UnknownRouteImport.update({
  id: '/_unknown',
  getParentRoute: () => rootRouteImport,
} as any)
const rootRouteRoute = rootRouteRouteImport.update({
  id: '/(root)',
  getParentRoute: () => rootRouteImport,
} as any)
const authorizedRouteRoute = authorizedRouteRouteImport.update({
  id: '/(authorized)',
  getParentRoute: () => rootRouteImport,
} as any)
const rootIndexRoute = rootIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteRoute,
} as any)
const rootFeaturesRoute = rootFeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRouteRoute,
} as any)
const rootAboutRoute = rootAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteRoute,
} as any)
const authorizedUploadRoute = authorizedUploadRouteImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => authorizedRouteRoute,
} as any)
const authorizedSettingsRoute = authorizedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => authorizedRouteRoute,
} as any)
const authorizedScenariosRoute = authorizedScenariosRouteImport.update({
  id: '/scenarios',
  path: '/scenarios',
  getParentRoute: () => authorizedRouteRoute,
} as any)
const authorizedProgressRoute = authorizedProgressRouteImport.update({
  id: '/progress',
  path: '/progress',
  getParentRoute: () => authorizedRouteRoute,
} as any)
const authorizedDashboardRoute = authorizedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => authorizedRouteRoute,
} as any)
const authorizedSimulationRouteRoute =
  authorizedSimulationRouteRouteImport.update({
    id: '/simulation',
    path: '/simulation',
    getParentRoute: () => authorizedRouteRoute,
  } as any)
const rootAuthSignupRoute = rootAuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteRoute,
} as any)
const rootAuthLoginRoute = rootAuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteRoute,
} as any)
const authorizedSimulationScenarioIdRoute =
  authorizedSimulationScenarioIdRouteImport.update({
    id: '/$scenarioId',
    path: '/$scenarioId',
    getParentRoute: () => authorizedSimulationRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof rootIndexRoute
  '/simulation': typeof authorizedSimulationRouteRouteWithChildren
  '/dashboard': typeof authorizedDashboardRoute
  '/progress': typeof authorizedProgressRoute
  '/scenarios': typeof authorizedScenariosRoute
  '/settings': typeof authorizedSettingsRoute
  '/upload': typeof authorizedUploadRoute
  '/about': typeof rootAboutRoute
  '/features': typeof rootFeaturesRoute
  '/simulation/$scenarioId': typeof authorizedSimulationScenarioIdRoute
  '/auth/login': typeof rootAuthLoginRoute
  '/auth/signup': typeof rootAuthSignupRoute
}
export interface FileRoutesByTo {
  '/': typeof rootIndexRoute
  '/simulation': typeof authorizedSimulationRouteRouteWithChildren
  '/dashboard': typeof authorizedDashboardRoute
  '/progress': typeof authorizedProgressRoute
  '/scenarios': typeof authorizedScenariosRoute
  '/settings': typeof authorizedSettingsRoute
  '/upload': typeof authorizedUploadRoute
  '/about': typeof rootAboutRoute
  '/features': typeof rootFeaturesRoute
  '/simulation/$scenarioId': typeof authorizedSimulationScenarioIdRoute
  '/auth/login': typeof rootAuthLoginRoute
  '/auth/signup': typeof rootAuthSignupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(authorized)': typeof authorizedRouteRouteWithChildren
  '/(root)': typeof rootRouteRouteWithChildren
  '/_unknown': typeof UnknownRoute
  '/(authorized)/simulation': typeof authorizedSimulationRouteRouteWithChildren
  '/(authorized)/dashboard': typeof authorizedDashboardRoute
  '/(authorized)/progress': typeof authorizedProgressRoute
  '/(authorized)/scenarios': typeof authorizedScenariosRoute
  '/(authorized)/settings': typeof authorizedSettingsRoute
  '/(authorized)/upload': typeof authorizedUploadRoute
  '/(root)/about': typeof rootAboutRoute
  '/(root)/features': typeof rootFeaturesRoute
  '/(root)/': typeof rootIndexRoute
  '/(authorized)/simulation/$scenarioId': typeof authorizedSimulationScenarioIdRoute
  '/(root)/auth/login': typeof rootAuthLoginRoute
  '/(root)/auth/signup': typeof rootAuthSignupRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/simulation'
    | '/dashboard'
    | '/progress'
    | '/scenarios'
    | '/settings'
    | '/upload'
    | '/about'
    | '/features'
    | '/simulation/$scenarioId'
    | '/auth/login'
    | '/auth/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/simulation'
    | '/dashboard'
    | '/progress'
    | '/scenarios'
    | '/settings'
    | '/upload'
    | '/about'
    | '/features'
    | '/simulation/$scenarioId'
    | '/auth/login'
    | '/auth/signup'
  id:
    | '__root__'
    | '/(authorized)'
    | '/(root)'
    | '/_unknown'
    | '/(authorized)/simulation'
    | '/(authorized)/dashboard'
    | '/(authorized)/progress'
    | '/(authorized)/scenarios'
    | '/(authorized)/settings'
    | '/(authorized)/upload'
    | '/(root)/about'
    | '/(root)/features'
    | '/(root)/'
    | '/(authorized)/simulation/$scenarioId'
    | '/(root)/auth/login'
    | '/(root)/auth/signup'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authorizedRouteRoute: typeof authorizedRouteRouteWithChildren
  rootRouteRoute: typeof rootRouteRouteWithChildren
  UnknownRoute: typeof UnknownRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unknown': {
      id: '/_unknown'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnknownRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(root)': {
      id: '/(root)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authorized)': {
      id: '/(authorized)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authorizedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(root)/': {
      id: '/(root)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootIndexRouteImport
      parentRoute: typeof rootRouteRoute
    }
    '/(root)/features': {
      id: '/(root)/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof rootFeaturesRouteImport
      parentRoute: typeof rootRouteRoute
    }
    '/(root)/about': {
      id: '/(root)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof rootAboutRouteImport
      parentRoute: typeof rootRouteRoute
    }
    '/(authorized)/upload': {
      id: '/(authorized)/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof authorizedUploadRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/settings': {
      id: '/(authorized)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof authorizedSettingsRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/scenarios': {
      id: '/(authorized)/scenarios'
      path: '/scenarios'
      fullPath: '/scenarios'
      preLoaderRoute: typeof authorizedScenariosRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/progress': {
      id: '/(authorized)/progress'
      path: '/progress'
      fullPath: '/progress'
      preLoaderRoute: typeof authorizedProgressRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/dashboard': {
      id: '/(authorized)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof authorizedDashboardRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/simulation': {
      id: '/(authorized)/simulation'
      path: '/simulation'
      fullPath: '/simulation'
      preLoaderRoute: typeof authorizedSimulationRouteRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(root)/auth/signup': {
      id: '/(root)/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof rootAuthSignupRouteImport
      parentRoute: typeof rootRouteRoute
    }
    '/(root)/auth/login': {
      id: '/(root)/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof rootAuthLoginRouteImport
      parentRoute: typeof rootRouteRoute
    }
    '/(authorized)/simulation/$scenarioId': {
      id: '/(authorized)/simulation/$scenarioId'
      path: '/$scenarioId'
      fullPath: '/simulation/$scenarioId'
      preLoaderRoute: typeof authorizedSimulationScenarioIdRouteImport
      parentRoute: typeof authorizedSimulationRouteRoute
    }
  }
}

interface authorizedSimulationRouteRouteChildren {
  authorizedSimulationScenarioIdRoute: typeof authorizedSimulationScenarioIdRoute
}

const authorizedSimulationRouteRouteChildren: authorizedSimulationRouteRouteChildren =
  {
    authorizedSimulationScenarioIdRoute: authorizedSimulationScenarioIdRoute,
  }

const authorizedSimulationRouteRouteWithChildren =
  authorizedSimulationRouteRoute._addFileChildren(
    authorizedSimulationRouteRouteChildren,
  )

interface authorizedRouteRouteChildren {
  authorizedSimulationRouteRoute: typeof authorizedSimulationRouteRouteWithChildren
  authorizedDashboardRoute: typeof authorizedDashboardRoute
  authorizedProgressRoute: typeof authorizedProgressRoute
  authorizedScenariosRoute: typeof authorizedScenariosRoute
  authorizedSettingsRoute: typeof authorizedSettingsRoute
  authorizedUploadRoute: typeof authorizedUploadRoute
}

const authorizedRouteRouteChildren: authorizedRouteRouteChildren = {
  authorizedSimulationRouteRoute: authorizedSimulationRouteRouteWithChildren,
  authorizedDashboardRoute: authorizedDashboardRoute,
  authorizedProgressRoute: authorizedProgressRoute,
  authorizedScenariosRoute: authorizedScenariosRoute,
  authorizedSettingsRoute: authorizedSettingsRoute,
  authorizedUploadRoute: authorizedUploadRoute,
}

const authorizedRouteRouteWithChildren = authorizedRouteRoute._addFileChildren(
  authorizedRouteRouteChildren,
)

interface rootRouteRouteChildren {
  rootAboutRoute: typeof rootAboutRoute
  rootFeaturesRoute: typeof rootFeaturesRoute
  rootIndexRoute: typeof rootIndexRoute
  rootAuthLoginRoute: typeof rootAuthLoginRoute
  rootAuthSignupRoute: typeof rootAuthSignupRoute
}

const rootRouteRouteChildren: rootRouteRouteChildren = {
  rootAboutRoute: rootAboutRoute,
  rootFeaturesRoute: rootFeaturesRoute,
  rootIndexRoute: rootIndexRoute,
  rootAuthLoginRoute: rootAuthLoginRoute,
  rootAuthSignupRoute: rootAuthSignupRoute,
}

const rootRouteRouteWithChildren = rootRouteRoute._addFileChildren(
  rootRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authorizedRouteRoute: authorizedRouteRouteWithChildren,
  rootRouteRoute: rootRouteRouteWithChildren,
  UnknownRoute: UnknownRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
